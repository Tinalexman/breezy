Backend Design & Development Specification: Flutter Web Sharing Platform
Document Version: 1.0
Date: July 11, 2025
Project Name: [Breezy]
Module: Backend

1. Project Overview & Core Backend Purpose
This document outlines the backend architecture and development specifications for the Flutter Web Sharing Platform. The backend's primary responsibility is to securely receive user Flutter project code from GitHub, reliably build it into a web application, store the static assets efficiently, and manage the deployment and serving of these applications through a global CDN. It also handles user authentication, data management, and orchestration of the entire app lifecycle.

2. Target Audience (Backend's Consumers)
Your Frontend (Next.js): Consumes APIs for user authentication, repository listing, app management, build status updates, and retrieving deployed URLs.

GitHub Webhooks: Sends real-time notifications about user code pushes.

Developers: Your engineering team who will build, maintain, and scale this backend.

3. Core Backend Technologies
Primary Language: Go (Golang)

Containerization/Isolation: Docker

Queueing System: Redis (for Job Queue)

Database: PostgreSQL

Cloud Storage: Cloudflare R2 (S3-compatible)

CDN/DNS Management: Cloudflare (using Cloudflare API)

Version Control Integration: GitHub API / Webhooks

Runtime Environment: Linux servers (e.g., VMs on GCP, AWS EC2, DigitalOcean, or managed Kubernetes)

4. Core Backend Principles
Scalability: Design for horizontal scaling of stateless services (API Gateway, Build Workers) to handle increasing load.

Reliability: Implement robust error handling, retries, and monitoring for all critical operations (builds, uploads, API calls).

Security: Prioritize secure handling of user data, GitHub tokens, and isolated build environments.

Performance: Optimize build times, API response times, and content delivery through efficient design and CDN utilization.

Automation: Minimize manual intervention for app deployment and management workflows.

Observability: Implement comprehensive logging, metrics, and tracing for troubleshooting and performance analysis.

5. Backend Modules & Responsibilities
5.1. API Gateway / Web Server (Go Service)
Function: Exposed HTTP/HTTPS endpoints for the frontend and external services.

Key Responsibilities:

User Authentication: Handles GitHub OAuth 2.0 flow for user login and repository authorization. Issues and manages JWTs/session tokens for frontend API access.

GitHub Webhook Receiver: Exposes a public endpoint (/webhooks/github) to receive push events from user repositories. Validates incoming webhook signatures.

Frontend API Endpoints:

/api/user/repos: Lists user's accessible GitHub repositories.

/api/app/create: Initiates a new app deployment (links a GitHub repo to a new app record).

/api/app/{appId}/deploy: Manually triggers a new build/deployment for an existing app.

/api/app/{appId}/status: Provides real-time build status and logs (via polling or WebSockets if implemented later).

/api/app/{appId}/details: Retrieves app configurations, deployment history, and current URL.

/api/app/{appId}/delete: Handles app deletion.

/api/app/{appId}/rollback: (Future) Triggers a rollback to a previous deployment.

Request Validation & Authorization: Ensures authenticated access to user-specific resources.

Job Dispatching: After processing a valid request (e.g., a push webhook or an explicit deploy API call), it creates and dispatches a build job message to the Job Queue.

5.2. GitHub Integration (Go Module/Client)
Function: Interacts with the GitHub API on behalf of the user.

Key Responsibilities:

OAuth Management: Handles token exchange, refresh, and storage of user GitHub OAuth tokens (encrypted in DB).

API Calls: Makes calls to GitHub API for:

Listing user repositories.

Cloning repositories (during build process).

(Optional) Setting up/managing webhooks on user repos (if not done manually by the user or within GitHub).

(Optional) Fetching commit details, branch information.

5.3. Job Queue (Redis)
Function: A message broker for asynchronous processing.

Key Responsibilities:

Acts as a buffer between the API Gateway and Build Workers.

Ensures build jobs are processed reliably, even if a worker fails.

Allows for parallel processing of multiple build jobs by multiple workers.

Data Structure: Simple queue (e.g., Redis List or Pub/Sub). Messages will contain app_id, repo_url, commit_hash, deployment_id, etc.

5.4. Build Workers (Go Service)
Function: Executes the core Flutter Web build process in isolated Docker containers. Can run on multiple server instances.

Key Responsibilities:

Job Polling: Continuously polls the Job Queue for new build requests.

Docker Orchestration:

Pulls a pre-built "Flutter Build Environment" Docker image (containing Flutter SDK, Dart, Git).

Launches a new, ephemeral Docker container for each build job.

Mounts a temporary volume or copies files into the container for the build workspace.

Secure Cloning: Clones the user's repository inside the container, using temporary/scoped GitHub tokens for authentication (if private repo).

Executes flutter pub get and flutter build web --release --base-href /apps/{appId}/ inside the container.

Captures stdout and stderr logs from the build process.

Error Handling: Detects build failures (non-zero exit code), captures error logs.

File Transfer: After a successful build, copies the build/web output artifacts from the Docker container to a temporary location on the host.

Container Cleanup: Destroys the Docker container after the build is complete (success or failure).

5.5. Cloud Storage Uploader (Go Module/Service)
Function: Manages file uploads to Cloudflare R2 (or AWS S3).

Key Responsibilities:

Receives the path to the built Flutter Web static files from the Build Worker.

Uploads: Puts all files from the build/web directory into your designated Cloudflare R2 bucket.

Versioning Path: Uploads to a specific path that represents the latest version of the app.

Path Structure: r2://your-bucket-name/apps/<app-id>/latest/ (for overwriting)

(For Rollbacks: r2://your-bucket-name/apps/<app-id>/deployments/<deployment-id>/ and a separate mechanism to point /apps/<app-id>/ to the current deployment, e.g., Cloudflare Workers or redirects).

Access Control: Ensures appropriate public read access for the uploaded files.

5.6. Database Management (PostgreSQL)
Function: Stores all persistent application data.

Key Schema Tables:

users: id (PK), github_id, username, email, github_access_token (encrypted), created_at, updated_at.

apps: id (PK), user_id (FK), repo_id, name, sanitized_name, current_deployment_id (FK to deployments), custom_domain_id (FK to custom_domains), created_at, updated_at.

repositories: id (PK), github_repo_id, owner, name, full_name, default_branch, clone_url, created_at.

deployments: id (PK), app_id (FK), git_commit_hash, status (pending, building, success, failed), logs_url (path to logs in storage), static_files_url (path in R2), created_at, finished_at.

custom_domains (future): id (PK), app_id (FK), domain_name, status (pending, active, failed), created_at.

5.7. Cloudflare DNS & CDN Integration (Go Module/Client)
Function: Interacts with the Cloudflare API to manage DNS records and CDN cache.

Key Responsibilities:

DNS Record Creation: When an app is successfully deployed, programmatically creates a CNAME record in Cloudflare for [sanitized_app_name].breezy.app pointing to your R2 bucket's public endpoint.

Cache Invalidation: After each successful new deployment to latest/, triggers an API call to Cloudflare to invalidate the cache for https://[sanitized_app_name].breezy.app/* to ensure new content is served immediately.

(Future) Manage custom domains (add CNAMEs for user-provided domains).

6. Workflow for App Deployment (User Push)
User Pushes Code: Developer pushes updates to their GitHub repository.

GitHub Webhook Trigger: GitHub sends a push webhook to your API Gateway.

Job Enqueue: API Gateway validates webhook, creates a BuildJob message, and pushes it to Redis. Database Deployment record is created with status: pending.

Worker Pulls Job: An available Build Worker pulls the BuildJob from Redis.

Repo Clone: Build Worker clones the user's repository (using GitHub access token) into a temporary workspace within a Docker container.

Flutter Build: Docker container executes flutter pub get then flutter build web --release --base-href /apps/<app-id>/ (or / if using custom domain directly on path). Logs are captured.

Upload to R2: On successful build, Build Worker uploads build/web content to r2://your-bucket-name/apps/<app-id>/latest/.

Update Database: Build Worker updates Deployment record to status: success, stores static_files_url, and updates App.current_deployment_id.

DNS & Cache Update: Cloudflare client creates/confirms CNAME for [sanitized_app_name].breezy.app (if not already existing) and invalidates cache for that URL.

Frontend Notification: Frontend polls API or receives WebSocket update, displaying the new URL and success status.

7. Security Considerations
GitHub OAuth Tokens: Encrypt user access tokens in the database. Use them only when necessary (e.g., for cloning private repos) and consider short-lived tokens if GitHub supports it.

Docker Isolation: Each build runs in a fresh, isolated Docker container, preventing build environment pollution or cross-user data leakage. Ensure containers run with minimal necessary privileges.

API Keys/Tokens: All API keys (Cloudflare, GitHub) for your backend services must be stored securely (e.g., environment variables, secret management service) and never hardcoded.

Input Validation: Strictly validate all incoming data from webhooks and frontend APIs to prevent injection attacks or malformed requests.

Rate Limiting: Implement rate limiting on your API Gateway to prevent abuse.

Logging & Auditing: Comprehensive logs for all actions, especially build processes and data access.

8. Scalability & Reliability
Stateless Services: Design API Gateway and Build Workers to be stateless, allowing for easy horizontal scaling by simply adding more instances.

Job Queue: Critical for resilience. If a worker fails, the job remains in the queue and can be picked up by another worker.

Retry Mechanisms: Implement retries with exponential backoff for external API calls (GitHub, Cloudflare, R2).

Load Balancing: Use a load balancer (e.g., Nginx, cloud provider's load balancer) in front of your API Gateway and Build Workers.

Observability: Integrated monitoring (Prometheus, Grafana), logging (ELK stack, Loki), and tracing (Jaeger, OpenTelemetry) to quickly identify and resolve issues.

9. Deployment & Operations
Containerization: Package all Go services (API Gateway, Build Worker) as Docker images for consistent deployment.

Orchestration: Deploy using a container orchestration platform like Kubernetes, Docker Compose, or a managed service like AWS ECS/GCP Cloud Run for easy scaling, deployment, and management.

Infrastructure as Code (IaC): Use tools like Terraform or Pulumi to define and manage your cloud infrastructure (VMs, databases, R2 buckets, Cloudflare DNS).