# Platoons Entertainment Backend - Detailed Project Structure Analysis

## Overview
This is a **Go-based event hosting platform backend** built with **Fiber framework** and **MongoDB**. The project follows a **layered architecture pattern** with clear separation of concerns across different modules.

## Architecture Layers

### 1. **Entry Point (`main.go`)**
- **Purpose**: Application bootstrap and server initialization
- **Key Responsibilities**:
  - Environment configuration loading
  - MongoDB connection setup
  - Fiber server configuration with middleware
  - Route registration
  - Worker pool initialization
  - Graceful shutdown handling

### 2. **Configuration Layer (`config/`)**
```
type Environment struct {
	AppData     AppData
	Database    Database
	Domain      Domain
	Paystack    Paystack
	Cloudinary  Cloudinary
	EmailConfig EmailConfig
}
```

**Purpose**: Centralized configuration management
- **`env_config.go`**: Environment variable loading using Viper
- **`mongo_config.go`**: MongoDB connection setup and management
- **Features**: Support for multiple environment files, automatic env variable loading

### 3. **Data Layer (`model/`)**
**Purpose**: MongoDB document schemas and data structures

**Key Models**:
- **`user.go`**: User authentication and profile data
- **`event.go`**: Event management with complex nested structures
- **`ticket.go`**: Ticket booking and validation
- **`transaction.go`**: Payment processing records
- **`booking.go`**: Event booking management
- **`attendee.go`**: Event attendee information
- **`account.go`**: Bank account details for payouts
- **`media.go`**: File upload and media management

**Example Structure**:
```
type User struct {
	Id           primitive.ObjectID `bson:"_id" json:"id"`
	FirstName    string             `bson:"firstName" json:"firstName"`
	LastName     string             `bson:"lastName" json:"lastName"`
	Username     string             `bson:"username" json:"username"`
	Email        string             `bson:"email" json:"email"`
	Image        string             `bson:"image" json:"image"`
	Bio          string             `bson:"bio" json:"bio"`
	Verified     bool               `bson:"verified" json:"verified"`
	UserType     string             `bson:"userType" json:"userType"`
	Roles        []string           `bson:"roles" json:"roles"`
	PasswordHash PasswordHash       `bson:"passwordHash" json:"passwordHash"`
	CreatedAt    time.Time          `bson:"createdAt" json:"createdAt"`
}
```

### 4. **Repository Layer (`repository/`)**
**Purpose**: Data access abstraction layer

**Key Features**:
- **Generic Repository Pattern**: Single repository interface for all collections
- **Index Management**: Automatic database index creation
- **Transaction Support**: MongoDB transaction handling
- **Collection Management**: Centralized repository initialization

**Repository Structure**:
```
type Repository struct {
	Collection *mongo.Collection
}

var repositories = map[string]*Repository{}
```

**Collections**:
- `users` (with email index)
- `events` (with slug, name, organizer indexes)
- `tickets` (with reference index)
- `bookings` (with reference index)
- `transactions`
- `attendees` (with email, eventId compound index)
- `accounts`
- `media`

### 5. **Validation Layer (`validation/`)**
**Purpose**: Request validation and data sanitization

**Key Features**:
- **Struct-based validation** using `go-playground/validator`
- **Custom validation functions** for business logic
- **Parameter validation** for URL parameters
- **Repository integration** for database-level validation

**Validation Types**:
- **User validation**: Registration, login, profile updates
- **Event validation**: Creation, updates, retrieval
- **Ticket validation**: Booking, validation
- **Payment validation**: Transaction processing
- **Media validation**: File uploads

**Example Validation**:
```
type RegisterUser struct {
	FirstName string `json:"firstName" validate:"required"`
	LastName  string `json:"lastName" validate:"required"`
	Role      string `json:"role" validate:"required"`
	UserType  string `json:"type" validate:"required"`
	Email     string `json:"email" validate:"required"`
	Password  string `json:"password" validate:"required"`
}
```

### 6. **Controller Layer (`controller/`)**
**Purpose**: HTTP request handling and business logic orchestration

**Key Controllers**:
- **`auth_controller.go`**: Authentication (login, register, verify)
- **`user_controller.go`**: User profile management
- **`event_controller.go`**: Event CRUD operations
- **`ticket_controller.go`**: Ticket booking and management
- **`booking_controller.go`**: Event booking processing
- **`transaction_controller.go`**: Payment processing
- **`payment_controller.go`**: Payment gateway integration
- **`media_controller.go`**: File upload handling

**Controller Pattern**:
```
func TicketController(router fiber.Router) {
	router.Get("/", getAllTickets)
	router.Get("/user", middleware.ValidateAccessToken, validation.ValidateUserIDFromLocals, getUserTickets)
	router.Get("/event/:eventId", validation.ValidateEventIDFromParams, getEventTickets)
	router.Get("/:id", validation.ValidateTicketIDFromParams, getTicketById)
	router.Post("/", middleware.ValidateAccessToken, middleware.EnsureVerifiedUser, validation.ValidateEventIDFromBody, validation.ValidateCreateTicket, createTicket)
	router.Patch("/:id", middleware.ValidateAccessToken, middleware.EnsureVerifiedUser, validation.ValidateUpdateTicket, updateTicket)
	router.Delete("/:id", middleware.ValidateAccessToken, middleware.EnsureVerifiedUser, validation.ValidateTicketIDFromParams, deleteTicket)
	router.Post("/validate", validateTicket)
}
```

### 7. **Middleware Layer (`middleware/`)**
**Purpose**: Request processing, authentication, and authorization

**Key Middleware**:
- **`validateToken.go`**: JWT token validation
- **`verifyRole.go`**: Role-based access control
- **`middleware.go`**: Request logging and debugging

**Authentication Flow**:
```
func ValidateAccessToken(c *fiber.Ctx) error {
	authHeader := c.Get("Authorization")
	// Token extraction and validation
	claims, err := utils.VerifyToken(token)
	// User ID extraction for downstream handlers
	c.Locals("user_id", claims.UserID)
	return c.Next()
}
```

### 8. **Utility Layer (`utils/`)**
**Purpose**: Shared utilities and helper functions

**Key Utilities**:
- **`jwt.go`**: JWT token generation and verification
- **`qr.go`**: QR code generation for tickets
- **`utils.go`**: General utilities (encryption, validation, formatting)
- **`freecache.go`**: In-memory caching utilities

**Utility Functions**:
- Password hashing with Argon2
- AES encryption/decryption
- Phone number validation and normalization
- Currency conversion (Naira/Kobo)
- Random string generation
- Struct-to-map conversion

### 9. **Worker System (`worker/`)**
**Purpose**: Background job processing

**Key Components**:
- **`worker.go`**: Worker pool implementation
- **`handlers.go`**: Job type handlers
- **`payload.go`**: Job payload structures
- **`index.go`**: Job queue management

**Features**:
- Asynchronous job processing
- Retry mechanism
- Job status tracking
- Cleanup of completed jobs

### 10. **Template System (`template/` & `templates/`)**
**Purpose**: Email and HTML template generation

**Templates**:
- **`otp.hbs`**: OTP verification emails
- **`ticket.hbs`**: Ticket HTML generation

## Data Flow Architecture

```
HTTP Request → Middleware → Validation → Controller → Repository → MongoDB
                ↓
            Response ← Controller ← Repository ← MongoDB
```

## Key Design Patterns

### 1. **Repository Pattern**
- Abstract data access layer
- Consistent interface across collections
- Transaction support
- Index management

### 2. **Middleware Chain**
- Authentication middleware
- Validation middleware
- Role-based access control
- Request logging

### 3. **Validation Chain**
- Struct-based validation
- Custom business logic validation
- Parameter validation
- Database-level validation

### 4. **Worker Pattern**
- Background job processing
- Job queue management
- Retry mechanisms
- Status tracking

## Security Features

1. **Authentication**: JWT-based token system
2. **Authorization**: Role-based access control
3. **Password Security**: Argon2 hashing with salt
4. **Data Encryption**: AES-GCM encryption
5. **Input Validation**: Comprehensive request validation
6. **Rate Limiting**: Request rate limiting middleware

## Performance Optimizations

1. **Database Indexing**: Strategic MongoDB indexes
2. **Connection Pooling**: MongoDB connection management
3. **Caching**: In-memory caching utilities
4. **Background Processing**: Worker pool for heavy operations
5. **Graceful Shutdown**: Proper resource cleanup

## Project File Structure

```
platoons_backend/
├── main.go                    # Application entry point
├── go.mod                     # Go module dependencies
├── go.sum                     # Go module checksums
├── README.md                  # Project documentation
├── .dev.env                   # Development environment variables
├── .gitignore                 # Git ignore patterns
├── ecosystem.config.js         # PM2 configuration
├── .air.toml                  # Air live reload configuration
├── .cursorrules               # Cursor IDE rules
├── config/                    # Configuration management
│   ├── env_config.go         # Environment variable loading
│   └── mongo_config.go       # MongoDB connection setup
├── controller/                # HTTP request handlers
│   ├── index.go              # Controller initialization
│   ├── auth_controller.go    # Authentication endpoints
│   ├── user_controller.go    # User management
│   ├── event_controller.go   # Event CRUD operations
│   ├── ticket_controller.go  # Ticket management
│   ├── booking_controller.go # Booking processing
│   ├── transaction_controller.go # Payment processing
│   ├── payment_controller.go # Payment gateway
│   └── media_controller.go   # File upload handling
├── middleware/                # Request processing middleware
│   ├── middleware.go         # Request logging
│   ├── validateToken.go      # JWT token validation
│   └── verifyRole.go         # Role-based access control
├── model/                    # Data models and schemas
│   ├── user.go              # User authentication model
│   ├── event.go             # Event management model
│   ├── ticket.go            # Ticket booking model
│   ├── transaction.go       # Payment transaction model
│   ├── booking.go           # Event booking model
│   ├── attendee.go          # Event attendee model
│   ├── account.go           # Bank account model
│   └── media.go             # File upload model
├── repository/               # Data access layer
│   ├── index.go             # Repository initialization
│   ├── user_repository.go   # User data operations
│   ├── events_repository.go # Event data operations
│   ├── ticket_repository.go # Ticket data operations
│   ├── booking_repository.go # Booking data operations
│   ├── transaction_repository.go # Transaction data operations
│   ├── accounts_repository.go # Account data operations
│   ├── attendee_repository.go # Attendee data operations
│   └── media_repository.go  # Media data operations
├── validation/               # Request validation
│   ├── index.go             # Validation initialization
│   ├── user_validation.go   # User input validation
│   ├── event_validation.go  # Event input validation
│   ├── ticket_validation.go # Ticket input validation
│   ├── booking_validation.go # Booking input validation
│   ├── transaction_validation.go # Transaction validation
│   ├── payment_validation.go # Payment validation
│   └── media_validation.go  # Media validation
├── utils/                    # Shared utilities
│   ├── utils.go             # General utilities
│   ├── jwt.go               # JWT token utilities
│   ├── qr.go                # QR code generation
│   └── freecache.go         # Caching utilities
├── worker/                   # Background job processing
│   ├── index.go             # Worker initialization
│   ├── worker.go            # Worker pool implementation
│   ├── handlers.go          # Job type handlers
│   └── payload.go           # Job payload structures
├── template/                 # Email and HTML templates
│   ├── template.go          # Template initialization
│   ├── otp.hbs             # OTP email template
│   └── ticket.hbs          # Ticket HTML template
├── templates/                # Additional templates
│   └── otp.hbs             # OTP template copy
├── logger/                   # Logging utilities
│   └── log.go              # Logger configuration
└── tmp/                     # Temporary files
```

## API Endpoints Structure

### Authentication Routes
- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login
- `POST /api/auth/verify` - Email verification
- `POST /api/auth/refresh` - Token refresh

### User Management Routes
- `GET /api/users/profile` - Get user profile
- `PUT /api/users/profile` - Update user profile
- `GET /api/users/events` - Get user's events

### Event Management Routes
- `POST /api/events` - Create event
- `GET /api/events` - List events
- `GET /api/events/:id` - Get event details
- `PUT /api/events/:id` - Update event
- `DELETE /api/events/:id` - Delete event

### Ticket Management Routes
- `POST /api/tickets` - Create ticket
- `GET /api/tickets` - List tickets
- `GET /api/tickets/:id` - Get ticket details
- `PATCH /api/tickets/:id` - Update ticket
- `DELETE /api/tickets/:id` - Delete ticket
- `POST /api/tickets/validate` - Validate ticket

### Booking Management Routes
- `POST /api/bookings` - Create booking
- `GET /api/bookings` - List bookings
- `GET /api/bookings/:id` - Get booking details

### Payment Routes
- `POST /api/payments/initialize` - Initialize payment
- `POST /api/payments/verify` - Verify payment
- `POST /webhook/paystack` - Paystack webhook

### Media Routes
- `POST /api/media/upload` - Upload media files
- `GET /api/media/:id` - Get media details

## Database Collections

### Users Collection
- **Indexes**: email (unique)
- **Fields**: id, firstName, lastName, username, email, image, bio, verified, userType, roles, passwordHash, createdAt

### Events Collection
- **Indexes**: slug (unique), name, organizer
- **Fields**: id, organizer, name, description, category, image, address, artists, vendors, undisclosed, comingSoon, enableMultipleAssignments, startDate, endDate, website, instagram, twitter, tiktok, mode, ticketData, slug, createdAt

### Tickets Collection
- **Indexes**: ref (unique)
- **Fields**: id, userId, eventId, reference, createdAt

### Bookings Collection
- **Indexes**: reference (unique)
- **Fields**: id, eventId, customerData, ticketData, amount, status, reference, createdAt

### Transactions Collection
- **Fields**: id, userId, eventId, amount, status, reference, paymentMethod, createdAt

### Attendees Collection
- **Indexes**: email, eventId (compound)
- **Fields**: id, eventId, firstName, lastName, email, phone, createdAt

### Accounts Collection
- **Fields**: id, userId, bank, bankCode, accountNumber, accountName, createdAt

### Media Collection
- **Fields**: id, userId, fileName, fileUrl, fileType, fileSize, createdAt

## Environment Variables

### Application Configuration
- `APPLICATION_NAME` - Application name
- `APPLICATION_ENV` - Environment (development/production)
- `APPLICATION_PORT` - Server port
- `APPLICATION_ENCRYPTION_SECRET_KEY` - Encryption key

### Database Configuration
- `MONGO_DB_CONNECTION_STRING` - MongoDB connection string
- `MONGO_DB_NAME` - Database name

### Domain Configuration
- `DOMAIN` - Application domain

### Payment Configuration (Paystack)
- `PAYSTACK_SECRET_KEY` - Paystack secret key
- `PAYSTACK_PUBLIC_KEY` - Paystack public key

### Media Configuration (Cloudinary)
- `CLOUDINARY_CLOUD_NAME` - Cloudinary cloud name
- `CLOUDINARY_API_KEY` - Cloudinary API key
- `CLOUDINARY_API_SECRET` - Cloudinary API secret

### Email Configuration
- `EMAIL_DEFAULT_USERNAME` - Default email username
- `EMAIL_DEFAULT_PASSWORD` - Default email password
- `EMAIL_ORDER_CONFIRMATION_USERNAME` - Order confirmation email username
- `EMAIL_ORDER_CONFIRMATION_PASSWORD` - Order confirmation email password
- `EMAIL_SUPPORT_USERNAME` - Support email username
- `EMAIL_SUPPORT_PASSWORD` - Support email password

## Key Technologies Used

### Core Framework
- **Go 1.21+** - Programming language
- **Fiber v2** - Web framework
- **MongoDB** - NoSQL database
- **MongoDB Go Driver** - Database driver

### Authentication & Security
- **JWT** - JSON Web Tokens
- **Argon2** - Password hashing
- **AES-GCM** - Data encryption
- **bcrypt** - Password verification

### Validation & Processing
- **go-playground/validator** - Request validation
- **regexp** - Regular expressions
- **encoding/json** - JSON processing

### External Services
- **Paystack** - Payment processing
- **Cloudinary** - Media storage
- **QR Code Generation** - Ticket QR codes

### Development Tools
- **Air** - Live reload
- **PM2** - Process management
- **Viper** - Configuration management

## Development Workflow

1. **Environment Setup**: Configure `.dev.env` file
2. **Database Setup**: MongoDB connection and indexes
3. **Dependencies**: Install Go modules
4. **Development Server**: Run with Air for live reload
5. **Testing**: Manual API testing
6. **Deployment**: PM2 ecosystem configuration

This architecture provides a robust, scalable foundation for the event hosting platform with clear separation of concerns, comprehensive validation, and efficient data handling. 